services:
  auth_base:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    volumes:
      - ./:/social-net
      - cargo_cache:/usr/local/cargo/registry
      - auth_target:/social-net/target
    ports:
      - "8000:8000"
    networks:
      - my_networks

  mailer_base:
    build:
      context: .
      dockerfile: ./apps/mailer/Dockerfile
    volumes:
      - ./:/social-net
      - cargo_cache:/usr/local/cargo/registry
      - mailer_target:/social-net/target
    ports:
      - "8001:8000"
    networks:
      - my_networks

  web_base:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    volumes:
      - ./apps/web:/social-net
    networks:
      - my_networks

  nginx_base:
    image: nginx:alpine
    ports:
      - "80:80"
    networks:
      - my_networks

  postgres_base:
    image: postgres:15
    healthcheck:
      test: [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d
          ${POSTGRES_DB_NAME}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my_networks

  sqlx_cli:
    restart: "no"
    build:
      context: .
      dockerfile: ./libs/sqlx/Dockerfile
    volumes:
      - ./:/social-net
      - cargo_cache:/usr/local/cargo/registry
      - sqlx_cli_target:/social-net/target
    networks:
      - my_networks

  rabbitmq_base:
    image: rabbitmq:latest
    networks:
      - my_networks
